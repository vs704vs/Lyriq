{
  "name": "airbnb-clone-3",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@next-auth/prisma-adapter": "^1.0.5",
    "@prisma/client": "^4.11.0",
    "@types/node": "18.15.5",
    "@types/react": "18.0.28",
    "@types/react-dom": "18.0.11",
    "axios": "^1.3.4",
    "bcrypt": "^5.1.0",
    "date-fns": "^2.29.3",
    "eslint": "8.36.0",
    "eslint-config-next": "13.2.4",
    "leaflet": "^1.9.3",
    "next": "13.2.4",
    "next-auth": "^4.20.1",
    "next-cloudinary": "^4.0.1",
    "next-superjson-plugin": "^0.5.6",
    "query-string": "^8.1.0",
    "react": "18.2.0",
    "react-date-range": "^1.4.0",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.43.7",
    "react-hot-toast": "^2.4.0",
    "react-icons": "^4.8.0",
    "react-leaflet": "^4.2.1",
    "react-select": "^5.7.2",
    "react-spinners": "^0.13.8",
    "swr": "^2.1.1",
    "typescript": "5.0.2",
    "world-countries": "^4.0.0",
    "zustand": "^4.3.6"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.0",
    "@types/leaflet": "^1.9.3",
    "@types/react-date-range": "^1.4.4",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.21",
    "prisma": "^4.11.0",
    "tailwindcss": "^3.2.7"
  }
}











import React, { useEffect, useState } from 'react';
import './docsTable.scss';
import { IFolderContents } from '../../../../store/documentation/types';

interface DocsTableProps {
  currentFolderPath: string;
  additionalFolderPath: string;
  docsFilesList: IFolderContents;
}

const DocsTable: React.FC<DocsTableProps> = ({ currentFolderPath, additionalFolderPath, docsFilesList }) => {
  const [renderedFilesList, setRenderedFilesList] = useState<IFolderContents | null>(null);

  useEffect(() => {
    // Log the data when it's updated and ensure that setRenderedFilesList updates the UI.
    console.log('docsFilesList:', docsFilesList);
    if (docsFilesList && (docsFilesList.files.length || docsFilesList.folders.length)) {
      setRenderedFilesList(docsFilesList);
    }
  }, [docsFilesList]);

  if (!renderedFilesList) {
    // Display a loading or empty state until the data is available
    return <div>Loading files...</div>;
  }

  return (
    <div>
      <div style={{ display: 'flex', alignItems: 'center' }}>
        <div
          className="icon icon-xsm"
          style={{
            margin: 0,
            paddingInline: '10px',
            paddingBlock: '8px',
            alignContent: 'center',
            border: additionalFolderPath ? '2px solid #e3e3e3' : '2px solid #bfbfbf',
            color: additionalFolderPath ? '#e3e3e3' : 'black',
          }}
        >
          arrow_back
        </div>
        <div style={{ fontWeight: 600, fontSize: '14px', marginLeft: '20px', display: 'flex' }}>
          <div style={{ color: '#66777A', marginRight: '5px' }}>
            {currentFolderPath.substring(currentFolderPath.lastIndexOf('\\') + 1)}
          </div>
          {additionalFolderPath && <div>{additionalFolderPath.replaceAll('\\', '/')}</div>}
        </div>
      </div>

      <div className="table-container">
        <table className="table table-striped" style={{ position: 'relative' }}>
          <thead>
            <tr className="table-row table-header">
              <th scope="col" className="table-header" style={{ paddingRight: '150px' }}>Name</th>
              <th scope="col" className="table-header" style={{ paddingRight: '60px' }}>Type</th>
              <th scope="col" className="table-header" style={{ paddingRight: '50px' }}>Date Modified</th>
              <th scope="col" className="table-header">Size</th>
              <th scope="col" className="table-header" style={{ textAlign: 'end', paddingRight: '20px' }}>Action</th>
            </tr>
          </thead>
          <tbody>
            {renderedFilesList.folders && renderedFilesList.folders.map((folder) => (
              <tr key={folder.name}>
                <td>icon {folder.name}</td>
                <td>File folder</td>
                <td>{folder.modifiedDate}</td>
                <td>{folder.size} Ko</td>
                <td style={{ textAlign: 'end' }}>icon1 icon2</td>
              </tr>
            ))}

            {renderedFilesList.files && renderedFilesList.files.length > 0 && renderedFilesList.files.map((file) => (
              <tr key={file.name}>
                <td>icon {file.name}</td>
                <td>{file.type}</td>
                <td>{file.modifiedDate}</td>
                <td>{file.size} Ko</td>
                <td style={{ textAlign: 'end' }}>icon1 icon2</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default DocsTable;
